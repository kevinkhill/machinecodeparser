package mcpGUI;

import java.io.*;
import java.util.logging.*;
import javax.swing.JFileChooser;

public class mcpWin extends javax.swing.JFrame {

    private Boolean debug = true;

    /** Creates new form mcpWin */
    public mcpWin() {
        initComponents();
        engine = new parsingEngine();
        if(debug) {
            f_inputFilePath.setText("R:\\My Desktop\\parseTest.txt");
            f_outputDirPath.setText("R:\\My Desktop\\testOutput");
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dirChooserFrame = new javax.swing.JFrame();
        dirChooser = new javax.swing.JFileChooser();
        l_inputFile = new javax.swing.JLabel();
        f_inputFilePath = new javax.swing.JTextField();
        b_inputBrowse = new javax.swing.JButton();
        b_parse = new javax.swing.JButton();
        l_status = new javax.swing.JLabel();
        b_reset = new javax.swing.JButton();
        f_outputDirPath = new javax.swing.JTextField();
        b_outputBrowse = new javax.swing.JButton();
        l_outputDir = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        m_file = new javax.swing.JMenu();
        m_file_close = new javax.swing.JMenuItem();

        javax.swing.GroupLayout dirChooserFrameLayout = new javax.swing.GroupLayout(dirChooserFrame.getContentPane());
        dirChooserFrame.getContentPane().setLayout(dirChooserFrameLayout);
        dirChooserFrameLayout.setHorizontalGroup(
            dirChooserFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
            .addGroup(dirChooserFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(dirChooserFrameLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(dirChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        dirChooserFrameLayout.setVerticalGroup(
            dirChooserFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
            .addGroup(dirChooserFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(dirChooserFrameLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(dirChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Machine Code Parser Engine");
        setName("MCpe GUI"); // NOI18N

        l_inputFile.setText("Input File");

        b_inputBrowse.setText("Browse");
        b_inputBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_inputBrowseActionPerformed(evt);
            }
        });

        b_parse.setText("Parse File");
        b_parse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_parseActionPerformed(evt);
            }
        });

        l_status.setText("Please Select File");

        b_reset.setText("Reset");
        b_reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_resetActionPerformed(evt);
            }
        });

        b_outputBrowse.setText("Browse");
        b_outputBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_outputBrowseActionPerformed(evt);
            }
        });

        l_outputDir.setText("Output Dir");

        m_file.setText("File");

        m_file_close.setText("Close");
        m_file_close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_file_closeActionPerformed(evt);
            }
        });
        m_file.add(m_file_close);

        menuBar.add(m_file);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(l_inputFile)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(f_inputFilePath, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(b_inputBrowse))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(b_parse)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(b_reset)
                        .addGap(18, 18, 18)
                        .addComponent(l_status))
                    .addComponent(l_outputDir)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(f_outputDirPath, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(b_outputBrowse)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(l_inputFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(f_inputFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b_inputBrowse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(l_outputDir)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(f_outputDirPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b_outputBrowse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(b_parse)
                    .addComponent(b_reset)
                    .addComponent(l_status))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void b_inputBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_inputBrowseActionPerformed
        dirChooser = new JFileChooser();
        dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);

        if (evt.getSource() == b_inputBrowse) {
            int returnVal = dirChooser.showOpenDialog(dirChooserFrame);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = dirChooser.getSelectedFile();
                f_inputFilePath.setText(file.getPath());
                //workingFile = file.getName();
                //workingPath = file.getPath();
            }
        }
}//GEN-LAST:event_b_inputBrowseActionPerformed

    private void b_parseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_parseActionPerformed
        if (evt.getSource() == b_parse) {
            if (f_inputFilePath.getText().equals("")) {
//                misc.log("testing");
                l_status.setText("Error: Input File Needed");
            } else {
                try {
                    engine.setInputFilePath(f_inputFilePath.getText());
                    engine.setOutputDirPath(f_outputDirPath.getText());
                    engine.run();
                } catch (IOException ex) {
                    Logger.getLogger(mcpWin.class.getName()).log(Level.SEVERE, null, ex);
                }

                l_status.setText("Complete!");

            }
        }
    }//GEN-LAST:event_b_parseActionPerformed

    private void b_resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_resetActionPerformed
        l_status.setText("Please Select File");
        f_inputFilePath.setText("");
        f_outputDirPath.setText("");
    }//GEN-LAST:event_b_resetActionPerformed

    private void m_file_closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_file_closeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_m_file_closeActionPerformed

    private void b_outputBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_outputBrowseActionPerformed
        dirChooser = new JFileChooser();
        dirChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        if (evt.getSource() == b_outputBrowse) {
            int returnVal = dirChooser.showOpenDialog(dirChooserFrame);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = dirChooser.getSelectedFile();
                f_outputDirPath.setText(file.getPath());
                //workingFile = file.getName();
                //workingPath = file.getPath();
            }
        }
    }//GEN-LAST:event_b_outputBrowseActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mcpWin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b_inputBrowse;
    private javax.swing.JButton b_outputBrowse;
    private javax.swing.JButton b_parse;
    private javax.swing.JButton b_reset;
    private javax.swing.JFileChooser dirChooser;
    private javax.swing.JFrame dirChooserFrame;
    private javax.swing.JTextField f_inputFilePath;
    private javax.swing.JTextField f_outputDirPath;
    private javax.swing.JLabel l_inputFile;
    private javax.swing.JLabel l_outputDir;
    private javax.swing.JLabel l_status;
    private javax.swing.JMenu m_file;
    private javax.swing.JMenuItem m_file_close;
    private javax.swing.JMenuBar menuBar;
    // End of variables declaration//GEN-END:variables
    private parsingEngine engine;
    //private String workingFile;
}
